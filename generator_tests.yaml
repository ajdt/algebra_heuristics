Definitions:
    generator: {filename: eqn_generator.lp}
    solver: {filename: eqn_solver.lp }

Test equations exist:
    Modules: generator
    Expect: SAT

# note: ensure maxInitialDepth > 2 for the below code
Test thisFractionCanBeSimplifiedTo1:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), thisFractionCanBeSimplifiedTo1).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByPerformingFractionMultiplicationOnTheseTwoTerms:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByPerformingFractionMultiplicationOnTheseTwoTerms).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByMultiplyingByTheInverseOfThisFractionInstead:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByMultiplyingByTheInverseOfThisFractionInstead).
        _disableSolvability.
    Expect: SAT
Test soTheNumeratorOfThisFractionMustBeEqualToZero:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), soTheNumeratorOfThisFractionMustBeEqualToZero).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByAddingTheseTwoTermsTogether:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByAddingTheseTwoTermsTogether).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByCombiningTheseIntoASingleTerm:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByCombiningTheseIntoASingleTerm).
        _disableSolvability.
    Expect: SAT
Test areFactorsThatCancel:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), areFactorsThatCancel).
        _disableSolvability.
    Expect: SAT
Test canBeFactored:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), canBeFactored).
    Expect: SAT
Test weCanSimplifyByCombiningTheseTwoFractionsIntoASingleFraction:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByCombiningTheseTwoFractionsIntoASingleFraction).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByDistributingThisConstant:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByDistributingThisConstant).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByCancellingTheDenominatorOfThisFraction:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByCancellingTheDenominatorOfThisFraction).
        _disableSolvability.
    Expect: SAT
Test canBeCancelled:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), canBeCancelled).
        _disableSolvability.
    Expect: SAT
Test isATermThatCanBeFactored:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), isATermThatCanBeFactored).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByFactoringOutAFACTOR:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByFactoringOutAFACTOR).
        _disableSolvability.
    Expect: SAT
Test isEqualToZero:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), isEqualToZero).
        _disableSolvability.
    Expect: SAT
Test canBeIgnored:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), canBeIgnored).
        _disableSolvability.
    Expect: SAT
Test numeratorAndDenominatorCanBeMultipliedBySameTerm:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), numeratorAndDenominatorCanBeMultipliedBySameTerm).
        _disableSolvability.
    Expect: SAT
#Test areBothNegativeOperationsThatCancelOut:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), areBothNegativeOperationsThatCancelOut).
        #_disableSolvability.
    #Expect: SAT
#Test negationCanBeDistributed:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), negationCanBeDistributed).
        #_disableSolvability.
    #Expect: SAT
#Test negativeSignCanBePassedToTermOf:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), negativeSignCanBePassedToTermOf).
        #_disableSolvability.
    #Expect: SAT
Test weCanSimplifyByCancellingTheseTerms:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByCancellingTheseTerms).
        _disableSolvability.
    Expect: SAT
#Test addUpToZero:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), addUpToZero).
        #_disableSolvability.
    #Expect: SAT
Test canBeSubtractedFromTheEquation:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), canBeSubtractedFromTheEquation).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByMultiplyingBothSidesOfTheEquationByThisDenominator:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByMultiplyingBothSidesOfTheEquationByThisDenominator).
        _disableSolvability.
    Expect: SAT
Test canDivideBothSidesOfTheEquation:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), canDivideBothSidesOfTheEquation).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyBySubstitutingYForXDEG:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyBySubstitutingYForXDEG).
        _disableSolvability.
    Expect: SAT
Test weCanSimplifyByMultiplyingTheNumeratorByTheTerm:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), weCanSimplifyByMultiplyingTheNumeratorByTheTerm).
        _disableSolvability.
    Expect: SAT

