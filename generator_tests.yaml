Definitions:
    generator: {filename: eqn_generator.lp}
    solver: {filename: eqn_solver.lp }

Test equations exist:
    Modules: generator
    Expect: SAT

# note: ensure maxInitialDepth > 2 for the below code
#Test should perform addFractions heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), addFractions).
        #_disableSolvability.
    #Expect: SAT

# TODO: this test is broken
#Test should perform addInverses heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), addInverses).
        #_disableSolvability.
    #Expect: SAT

#Test should perform additiveIdentity heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), additiveIdentity).
    #Expect: SAT

# TODO: test is broken
#Test should perform applyDistribute heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), applyDistribute).
        #_disableSolvability.
    #Expect: SAT

#Test should perform cancelAcrossEqn heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), cancelAcrossEqn).
    #Expect: SAT

#Test should perform cancelCommTerms heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), cancelCommTerms).
        #_disableSolvability.
    #Expect: SAT

#Test should perform cancelNeg heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), cancelNeg).
    #Expect: SAT

#Test should perform combineLikeTerms heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), combineLikeTerms).
        #_disableSolvability.    # TODO: should work without this predicate
    #Expect: SAT

## TODO: broken test
#Test should perform divByOne heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), divByOne).
    #Expect: SAT

Test should perform factorSimpleQuad heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), factorSimpleQuad).
    Expect: SAT

#Test should perform divByOne heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), divByOne).
    #Expect: SAT
#Test should perform addZero heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), addZero).
    #Expect: SAT
#Test should perform factorCommTerm heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), factorCommTerm).
    #Expect: SAT

