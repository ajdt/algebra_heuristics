Definitions:
    generator: {filename: eqn_generator.lp}
    solver: {filename: eqn_solver.lp }

Test equations exist:
    Modules: generator
    Expect: SAT

# note: ensure maxInitialDepth > 2 for the below code
Test should perform addFractions heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), addFractions).
        _disableSolvability.
    Expect: SAT

Test should perform addInverses heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), addInverses).
        _disableSolvability.
    Expect: SAT

Test should perform additiveIdentity heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), additiveIdentity).
    Expect: SAT

Test should perform applyDistribute heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), applyDistribute).
        _disableSolvability.
    Expect: SAT

Test should perform cancelAcrossEqn heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), cancelAcrossEqn).
    Expect: SAT

Test should perform cancelCommTerms heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), cancelCommTerms).
        _disableSolvability.
    Expect: SAT

Test should perform cancelNeg heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), cancelNeg).
    Expect: SAT

#Test should perform combineLikeTerms heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), combineLikeTerms).
        #_disableSolvability.    # TODO: should work without this predicate
    #Expect: SAT

Test should perform divByOne heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), divByOne).
    Expect: SAT

Test should perform factorSimpleQuad heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), factorSimpleQuad).
    Expect: SAT

Test should perform ignoreDenom heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), ignoreDenom).
    Expect: SAT
Test should perform isolateConst heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), isolateConst).
        _disableSolvability.    
    Expect: SAT
## TODO: broken test
#Test should perform isolateVars heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), isolateVars).
    #Expect: SAT
Test should perform multiplyByOne heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), multiplyByOne).
    Expect: SAT
Test should perform multiplyByZero heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), multiplyByZero).
    Expect: SAT
Test should perform multiplyMonoms heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), multiplyMonoms).
    Expect: SAT

Test should perform multiplyWithFrac heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), multiplyWithFrac).
        _disableSolvability.    
    Expect: SAT

#Test should perform setRHSZero heuristic:
    #Modules: generator
    #Program: |
        #:- not _selectedHeuristic(_time(0,1), setRHSZero).
    #Expect: SAT
Test should perform substitute heuristic:
    Modules: generator
    Program: |
        :- not _selectedHeuristic(_time(0,1), substitute).
    Expect: SAT

